package chatrmi.cliente;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import chatrmi.stub.ChatIF;
import chatrmi.stub.ClientListenerIF;
import java.awt.CardLayout;
import java.net.UnknownHostException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class Cliente extends javax.swing.JFrame {
    class ClientListener extends UnicastRemoteObject implements ClientListenerIF{
        private static final long serialVersionUID = 1L;
        private final String formatedMsg = """
                             <html>
                               <p style="width:300px;">
                                <span style="color: gray;">[%s] </span>
                                <b style="color: %s;">%s: </b>
                                <span style="color:%s;">%s</span>
                               </p>
                             </html""";
        
        ClientListener() throws RemoteException {
        }
        
        @Override
        public void notificar(String hora, String user, String msg, String cor) throws RemoteException {
            String result = formatedMsg.formatted(hora, cor, user, cor, msg);
            chatModel.addElement(result);
        }

        @Override
        public void atualizarClientes() throws RemoteException {
            atualizarLista();
        }

        @Override
        public String getNome() throws RemoteException {
            return nome;
        }
    }

    private static ChatIF chat;
    private static Registry registro;
    
    private String nome;
    ClientListener listener;
    private final DefaultListModel<String> chatModel = new DefaultListModel<>();
    
    public Cliente() {
        initComponents();
        btnSair.setVisible(false);
        chatArea.setModel(chatModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        panelHeader = new javax.swing.JPanel();
        btnSair = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        panelCard = new javax.swing.JPanel();
        panelLogin = new javax.swing.JPanel();
        txtNome = new javax.swing.JTextField();
        btnConectar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtServidor = new javax.swing.JTextField();
        panelChat = new javax.swing.JPanel();
        txtInput = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();
        scrollListClientes = new javax.swing.JScrollPane();
        jlistClientes = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JList<>();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelHeader.setBackground(new java.awt.Color(0, 0, 0));
        panelHeader.setLayout(new java.awt.GridBagLayout());

        btnSair.setBackground(new java.awt.Color(255, 102, 102));
        btnSair.setForeground(new java.awt.Color(255, 102, 102));
        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/sair.png"))); // NOI18N
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        panelHeader.add(btnSair, gridBagConstraints);

        lblTitulo.setFont(new java.awt.Font("Courier New", 1, 36)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 214, 72));
        lblTitulo.setText("Chat RMI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(14, 148, 15, 152);
        panelHeader.add(lblTitulo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(panelHeader, gridBagConstraints);

        panelCard.setLayout(new java.awt.CardLayout());

        panelLogin.setBackground(new java.awt.Color(0, 0, 0));

        txtNome.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nome", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ebrima", 1, 14))); // NOI18N
        txtNome.setFocusCycleRoot(true);
        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        btnConectar.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        btnConectar.setText("Conectar");
        btnConectar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Login");

        txtServidor.setText("localhost");
        txtServidor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "IP do servidor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ebrima", 1, 14))); // NOI18N

        javax.swing.GroupLayout panelLoginLayout = new javax.swing.GroupLayout(panelLogin);
        panelLogin.setLayout(panelLoginLayout);
        panelLoginLayout.setHorizontalGroup(
            panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLoginLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtServidor)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNome, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConectar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE))
                .addGap(78, 78, 78))
        );
        panelLoginLayout.setVerticalGroup(
            panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoginLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnConectar)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        panelCard.add(panelLogin, "login");

        panelChat.setBackground(new java.awt.Color(0, 0, 0));

        txtInput.setToolTipText("");
        txtInput.setName("Mensagem"); // NOI18N
        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputActionPerformed(evt);
            }
        });

        btnEnviar.setBackground(new java.awt.Color(255, 255, 51));
        btnEnviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/enviar.png"))); // NOI18N
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        jlistClientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlistClientes.setFocusable(false);
        jlistClientes.setSelectionBackground(jlistClientes.getBackground());
        jlistClientes.setSelectionForeground(jlistClientes.getForeground());
        scrollListClientes.setViewportView(jlistClientes);

        chatArea.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        chatArea.setFocusable(false);
        chatArea.setSelectionBackground(chatArea.getBackground());
        chatArea.setSelectionForeground(chatArea.getForeground());
        jScrollPane2.setViewportView(chatArea);

        javax.swing.GroupLayout panelChatLayout = new javax.swing.GroupLayout(panelChat);
        panelChat.setLayout(panelChatLayout);
        panelChatLayout.setHorizontalGroup(
            panelChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChatLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panelChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelChatLayout.createSequentialGroup()
                        .addComponent(txtInput, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollListClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        panelChatLayout.setVerticalGroup(
            panelChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChatLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panelChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelChatLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(7, 7, 7)
                        .addGroup(panelChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtInput)
                            .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(scrollListClientes, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );

        txtInput.getAccessibleContext().setAccessibleName("");

        panelCard.add(panelChat, "chat");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(panelCard, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void sairDoChat() {
        try {
            chat.desconectCliente(listener);
        } catch (RemoteException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Houve um erro ao tentar desconectar do servidor", 
                    "Erro ao desconectar do servidor", JOptionPane.ERROR_MESSAGE);
        }
        CardLayout cl = (CardLayout) panelCard.getLayout();
        cl.show(panelCard, "login");
        btnSair.setVisible(false);
        chatModel.removeAllElements();
    }
    
    private void atualizarLista() {
        try {
            List<ClientListenerIF> clientes = chat.getClientes();
            DefaultListModel<String> model = new DefaultListModel<>();
            List<String> clienteNomes = new ArrayList<>();
            clienteNomes.add("<html><span style=\"color:green\">⚫ online</span>");
            for (var c : clientes) {
                clienteNomes.add(c.getNome());
            }
            model.addAll(clienteNomes);
            jlistClientes.setModel(model);
        } catch (RemoteException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Houve um erro ao atualizar a lista de clientes conectados", 
                    "Erro ao atualizar clientes", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void enviarMensagem() {
        try {
            String msg = txtInput.getText();
            chat.enviarMsg(nome, msg, ClientListenerIF.MENSAGEM); // Chama o método remoto
            txtInput.setText("");
        } catch (RemoteException e) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Houve um erro ao tentar enviar sua mensagem", 
                    "Erro ao enviar mensagem", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed
        enviarMensagem();
    }//GEN-LAST:event_txtInputActionPerformed

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        if (txtNome.getText().isBlank()) {
            JOptionPane.showMessageDialog(this, "O nome não pode ser nulo", "Digite um nome", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (txtServidor.getText().isBlank()) {
            JOptionPane.showMessageDialog(this, "O IP do servidor não pode ser nulo", "Digite um IP", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            String ip = txtServidor.getText().trim();
            registro = LocateRegistry.getRegistry(ip, 1099); // Localiza o registro RMI no servidor
            chat = (ChatIF) registro.lookup("MeuObjetoRemoto"); // Procura o objeto remoto
            
            nome = txtNome.getText();
            listener = new ClientListener();
            chat.registrarCliente(listener, nome);
            // conectado com sucesso. Mostrar próxima tela
            CardLayout cl = (CardLayout) panelCard.getLayout();
            cl.show(panelCard, "chat");
            btnSair.setVisible(true);
        } catch (RemoteException e) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Erro ao conectar-se com o com o servidor: "+e.getMessage());
        } catch (NotBoundException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Deu tudo errado aí");
        }
    }//GEN-LAST:event_btnConectarActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        enviarMensagem();
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        btnConectarActionPerformed(evt);
    }//GEN-LAST:event_txtNomeActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        sairDoChat();
    }//GEN-LAST:event_btnSairActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        sairDoChat();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cliente().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnSair;
    private javax.swing.JList<String> chatArea;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> jlistClientes;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel panelCard;
    private javax.swing.JPanel panelChat;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelLogin;
    private javax.swing.JScrollPane scrollListClientes;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtServidor;
    // End of variables declaration//GEN-END:variables
}
